#! /usr/bin/env bash
set -o errexit
set -o pipefail

### Check cmd exist
chkcmd "brew"
chkcmd "curl"
chkcmd "fnm"
chkcmd "git"
chkcmd "jq"
chkcmd "node"
chkcmd "npm"
chkcmd "npx"

### Upgrade homebrew apps/clis
cd "$HOME"
brew upgrade

### Update Node.js
### Change this line for perfer version "lts"
PERFER_NODEJS_VERSION="v18"
###
NODEJS_INFO="$(curl -fsSL https://nodejs.org/download/release/index.json)"
PERFER_NODEJS_REMOTE_VERSION="$(echo $NODEJS_INFO | jq -cr --arg NODE_V "$PERFER_NODEJS_VERSION" 'last( sort_by( .version | split("v") | .[1] | split(".") | map(tonumber) ) | .[] | select( .version | startswith($NODE_V) ) | .version )')"
LATEST_LTS_VERSION="$(echo $NODEJS_INFO | jq -cr 'last( sort_by( .version | split("v") | .[1] | split(".") | map(tonumber) ) | .[] | select( .lts ) | .version )')"
if [ "$PERFER_NODEJS_VERSION" = "lts" ]; then
  PERFER_NODEJS_REMOTE_VERSION="$LATEST_LTS_VERSION"
fi
CURRENT_LOCAL_VERSION="$(node -v)"
if [ "$PERFER_NODEJS_REMOTE_VERSION" = "null" ]; then
  LATEST_CURRENT_VERSION="$(echo $NODEJS_INFO | jq -cr 'last( sort_by( .version | split("v") | .[1] | split(".") | map(tonumber) ) | .[] | .version )')"
  printf "Perfer Node.js version: \033[1;31m$PERFER_NODEJS_VERSION\033[0m, no remote verions match\n"
  printf "Latest LTS: \033[1;36m$LATEST_LTS_VERSION\033[0m, Current: \033[1;36m$LATEST_CURRENT_VERSION\033[0m\n"
elif ! [ "$PERFER_NODEJS_REMOTE_VERSION" = "$CURRENT_LOCAL_VERSION" ]; then
  printf "Perfer Node.js version: \033[1;32m$PERFER_NODEJS_VERSION\033[0m, remote: \033[1;36m$PERFER_NODEJS_REMOTE_VERSION\033[0m, local: \033[1;31m$CURRENT_LOCAL_VERSION\033[0m, install from remote\n"
  fnm install "$PERFER_NODEJS_REMOTE_VERSION" &>/dev/null
  fnm default "$PERFER_NODEJS_REMOTE_VERSION" &>/dev/null
  fnm uninstall "$CURRENT_LOCAL_VERSION" &>/dev/null
  NODE_UPDATED="true"
fi

### Update npm
LATEST_NPM_VERSION="$(npm view npm@latest version)"
LATEST_NPM_NODE_ENGINE="$(npm view --json npm@latest engines | jq -cr '.node')"
LOCAL_NODE_VERSION="$(node -v)"
set +o errexit
NPM_ENGINE_SATISFIED="$(npx -y semver -r "$LATEST_NPM_NODE_ENGINE" "$LOCAL_NODE_VERSION")"
set -o errexit
CURRENT_NPM_VERSION="$(npm -v)"

if ! [ -z "$NPM_ENGINE_SATISFIED" ]; then
  if ! [ "$LATEST_NPM_VERSION" = "$CURRENT_NPM_VERSION" ]; then
    printf "Latest npm version: \033[1;36m$LATEST_NPM_VERSION\033[0m, local: \033[1;31m$CURRENT_NPM_VERSION\033[0m, install from remote\n"
    npm install --audit false --fund false --loglevel silent --progress false --global true npm
    export PATH="$(npm config get prefix)/bin:$PATH"
  fi
else
  if ! [ -z "$NODE_UPDATED" ]; then
    printf "Latest npm needs Node.js \033[1;36m$LATEST_NPM_NODE_ENGINE\033[0m, use bundled npm\n"
  fi
fi

### Print current node/npm version
CURRENT_LOCAL_VERSION="$(node -v)"
CURRENT_NPM_VERSION="$(npm -v)"
printf "\nnode: \033[1;32m$CURRENT_LOCAL_VERSION\033[0m, npm: \033[1;32m$CURRENT_NPM_VERSION\033[0m\n\n"

### Sync git projects
cd "$(dirname $0)"
cd "../../"
for PROJECT in $(ls .); do
  cd "$PROJECT"
  if [ -d .git ]; then
    git pull --all --quiet && printf "Sync \033[1m%s\033[0m ok\n" "$PROJECT" &
  fi
  cd "../"
done

wait
