#! /usr/bin/env bash
set -o errexit
set -o pipefail

### Check cmd exist
chkcmd "curl"

# --- 設定 ---
# DMG 檔案的下載 URL (已更新為釘釘 ARM64 版本)
DMG_URL="https://www.dingtalk.com/mac/d/qd=mac-arm64"

# 暫存 DMG 檔案的下載路徑和名稱
TEMP_DMG_FILE="/tmp/dingtalk_arm64_$$.dmg" # $$ 會插入當前腳本的 PID，使其更獨特

# --- 函數：清理 ---
# 這個函數確保在腳本結束或被中斷時，能嘗試卸載 DMG 並刪除下載的檔案
cleanup() {
  echo "執行清理..."
  # 如果掛載點變數存在且目錄存在，嘗試卸載
  if [ ! -z "$MOUNT_POINT" ] && [ -d "$MOUNT_POINT" ]; then
    echo "正在卸載磁碟映像：$MOUNT_POINT"
    # 使用 -quiet 和 -force 增加卸載成功的機會，即使有程序在使用它
    hdiutil detach "$MOUNT_POINT" -quiet -force || echo "警告：卸載 $MOUNT_POINT 可能未完全成功。"
  fi
  # 如果暫存 DMG 檔案存在，刪除它
  if [ -f "$TEMP_DMG_FILE" ]; then
    echo "正在刪除暫存 DMG 檔案：$TEMP_DMG_FILE"
    rm "$TEMP_DMG_FILE"
  fi
  echo "清理完成。"
}

# --- 設定陷阱（Trap），確保在腳本退出（正常或錯誤）時執行清理函數 ---
# EXIT: 腳本正常退出時觸發
# INT: 使用 Ctrl+C 中斷時觸發
# TERM: 被 kill 命令終止時觸發
trap cleanup EXIT INT TERM

# --- 1. 下載 DMG 檔案 ---
echo "正在從 $DMG_URL 下載釘釘 (ARM64) DMG 檔案..."
# -L: 跟隨 HTTP 重定向
# -o: 指定輸出檔案名
# -#: 顯示下載進度條
# -f: 在伺服器錯誤時靜默失敗 (例如 404 Not Found)
curl -Lf# -o "$TEMP_DMG_FILE" "$DMG_URL"
CURL_EXIT_CODE=$? # 獲取 curl 命令的退出狀態碼

# 檢查下載是否成功
if [ $CURL_EXIT_CODE -ne 0 ]; then
  echo "錯誤：下載 DMG 檔案失敗，curl 退出碼為 $CURL_EXIT_CODE。"
  echo "請檢查網路連線或 URL 是否有效：$DMG_URL"
  # trap 會自動調用 cleanup 函數
  exit 1
fi
echo "下載完成：$TEMP_DMG_FILE"

# --- 2. 掛載 DMG 檔案 ---
echo "正在掛載 DMG 檔案：$TEMP_DMG_FILE..."
# -nobrowse: 掛載後不在 Finder 中自動打開視窗
# -noverify: 跳過 DMG 檔案的驗證過程 (如果信任來源，可以節省時間)
# 將 hdiutil 的輸出儲存到變數中，以便後續解析掛載點
MOUNT_OUTPUT=$(hdiutil attach "$TEMP_DMG_FILE" -nobrowse -noverify)
HDIUTIL_EXIT_CODE=$?

# 檢查掛載是否成功
if [ $HDIUTIL_EXIT_CODE -ne 0 ]; then
  echo "錯誤：掛載 DMG 檔案失敗，hdiutil 退出碼為 $HDIUTIL_EXIT_CODE。"
  exit 1
fi

# 從 hdiutil 的輸出中提取掛載點路徑 (通常位於 /Volumes/ 目錄下)
# 使用 grep 找到包含 /Volumes/ 的那一行，然後用 sed 提取從 /Volumes/ 開始的路徑
MOUNT_POINT=$(echo "$MOUNT_OUTPUT" | grep '/Volumes/' | sed 's/.*\/Volumes\//\/Volumes\//')

# 檢查是否成功提取到掛載點，且該掛載點確實是一個目錄
if [ -z "$MOUNT_POINT" ] || [ ! -d "$MOUNT_POINT" ]; then
  echo "錯誤：無法從 hdiutil 的輸出中偵測到有效的掛載點。"
  echo "hdiutil 輸出："
  echo "$MOUNT_OUTPUT"
  # 嘗試基於 DMG 檔案名推測可能的掛載點名稱並嘗試卸載 (可能不成功)
  hdiutil detach "/Volumes/$(basename "$TEMP_DMG_FILE" .dmg)" -quiet -force 2>/dev/null
  exit 1
fi
echo "DMG 已掛載於：$MOUNT_POINT"

# --- 3. 尋找 PKG 檔案 ---
echo "正在於 $MOUNT_POINT 中搜尋 .pkg 安裝檔案..."
# find: 搜尋檔案
# "$MOUNT_POINT": 從掛載點開始搜尋
# -maxdepth 2: 限制搜尋深度為掛載點本身及其下一層目錄 (可根據需要調整)
# -name "*.pkg": 尋找檔名以 .pkg 結尾的檔案
# -print: 打印找到的檔案的完整路徑
# -quit: 找到第一個匹配的檔案後立即停止搜尋
PKG_FILE=$(find "$MOUNT_POINT" -maxdepth 2 -name "*.pkg" -print -quit)

# 檢查是否找到了 PKG 檔案
if [ -z "$PKG_FILE" ]; then
  echo "錯誤：在 $MOUNT_POINT （或其下一層目錄）中找不到 .pkg 檔案。"
  echo "請確認下載的 DMG 檔案中是否包含 .pkg 安裝程式，或者它是否位於更深的目錄中。"
  # trap 會處理卸載
  exit 1
fi

# 可選：檢查是否找到多於一個 PKG 檔案
PKG_COUNT=$(find "$MOUNT_POINT" -maxdepth 2 -name "*.pkg" | wc -l | tr -d ' ') # 計算找到的 pkg 數量並去除空白
if [ "$PKG_COUNT" -gt 1 ]; then
  echo "警告：在 $MOUNT_POINT 中找到 $PKG_COUNT 個 .pkg 檔案。腳本將嘗試安裝第一個找到的："
  echo "$PKG_FILE"
  # 如果需要更複雜的處理邏輯（例如讓使用者選擇），可以在此處添加代碼
fi

echo "找到 PKG 檔案：$PKG_FILE"

# --- 4. 執行 PKG 安裝程式 ---
echo "正在準備安裝 PKG 檔案：$PKG_FILE"
echo "這一步需要管理員權限 (sudo)，系統可能會提示您輸入密碼。"

# sudo installer: 使用管理員權限執行 macOS 的標準安裝程式命令
# -pkg "$PKG_FILE": 指定要安裝的套件檔案路徑 (加引號處理可能存在的空格)
# -target / : 指定安裝目標為系統的根卷宗 (標準安裝位置)
sudo installer -pkg "$PKG_FILE" -target /
INSTALL_EXIT_CODE=$?

# 檢查安裝是否成功
if [ $INSTALL_EXIT_CODE -ne 0 ]; then
  echo "錯誤：PKG 安裝失敗，installer 退出碼為 $INSTALL_EXIT_CODE。"
  # 即使安裝失敗，腳本也會繼續執行到 trap 中的 cleanup 步驟
else
  echo "釘釘 (DingTalk) 安裝成功！"
fi

# --- 清理工作由 trap 自動處理 ---
# cleanup 函數會在腳本結束時自動被調用，以卸載 DMG 並刪除下載的暫存檔

# --- 根據安裝結果設定最終退出狀態碼 ---
if [ $INSTALL_EXIT_CODE -ne 0 ]; then
  exit 1 # 返回非零值，表示過程中出現錯誤
else
  exit 0 # 返回 0，表示成功完成所有主要步驟
fi
